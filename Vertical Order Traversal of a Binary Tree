/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,vector<int>>>m;
        queue<pair<TreeNode*,pair<int,int>>>q;
        vector<vector<int>>ans;

        q.push({root,{0,0}});

        while(!q.empty()){

            pair<TreeNode*,pair<int,int>>front=q.front();
            q.pop();

            TreeNode* temp=front.first;
            int hd=front.second.first;
            int lvl=front.second.second;

            m[hd][lvl].push_back(temp->val);

            if(temp->right){
                q.push({temp->right,{hd+1,lvl+1}});
            }
            if(temp->left){
                q.push({temp->left,{hd-1,lvl+1}});
            }
            
        }

        
        for(auto i:m){
            int l=0;
            vector<int>temp;
            for(auto j:i.second){
                for(auto k:j.second){
                    temp.push_back(k);
                }
                
                sort(temp.begin()+l,temp.end());
                l=temp.size();
            }
            
            ans.push_back(temp);
        }

        return ans;
    }
};
