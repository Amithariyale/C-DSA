// you are required to complete this function 
// function should print the required range
class node{
    public:
    int data;
    int row;
    int col;
    
    node(int d,int r,int c){
        data=d;
        row=r;
        col=c;
    }
};

class compare{
      public:
      bool operator()(node* a,node* b){
          return a->data > b->data;
      }
};
class Solution{
    
    public:
    pair<int,int> findSmallestRange(int KSortedArray[][N], int n, int k)
    {
          //code here
          priority_queue<node*,vector<node*>,compare>q;
          
          int mini=INT_MAX;
          int maxi=INT_MIN;
          
          for(int i=0;i<k;i++){
              int ele=KSortedArray[i][0];
              mini=min(mini,ele);
              maxi=max(maxi,ele);
              q.push(new node(ele,i,0));
          }
          
          int start=mini,end=maxi;
          
          while(!q.empty()){
              node* top=q.top();
              q.pop();
              
              mini=top->data;
              
              if(maxi-mini < end-start){
                  start=mini;
                  end=maxi;
              }
              
              if(top->col+1<n){
                  maxi=max(maxi,KSortedArray[top->row][top->col+1]);
                  q.push(new node(KSortedArray[top->row][top->col+1],top->row,top->col+1));
              }
              
              else{
                  break;
              }
          }
          
          pair<int,int>ans=make_pair(start,end);
          return ans;
    }
};
