/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void findParent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parent,TreeNode* temp){
        if(root==NULL)return ;
        parent[root]= temp;

        findParent(root->left,parent,root);
        findParent(root->right,parent,root);
    }
    void solve(TreeNode* root,int cnt,int k,vector<int>&ans,unordered_map<TreeNode*,TreeNode*>&parent,unordered_map<TreeNode*,int>&vis){
        if(root==NULL || vis[root])return;
        if(cnt==k){
            cout<<cnt<<" ";
            ans.push_back(root->val);
            return ;
        }
        vis[root]=1;

        solve(root->left,cnt+1,k,ans,parent,vis);
        solve(root->right,cnt+1,k,ans,parent,vis);
        if(parent[root]->val!=-1 ){
            solve(parent[root],cnt+1,k,ans,parent,vis);
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        
        unordered_map<TreeNode*,TreeNode*>parent;
        unordered_map<TreeNode*,int>vis;
        TreeNode* temp=new TreeNode(-1);
        findParent(root,parent,temp);

        vector<int>ans;
        solve(target,0,k,ans,parent,vis);
        return ans;
    }
};
