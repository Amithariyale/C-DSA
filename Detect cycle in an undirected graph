class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        
        unordered_map<int,bool>visited;
        
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                bool ans=cycle(i,visited,adj);
                if(ans==1){
                    return true;
                }
            }
            
        }
        return false;
    }
    
    bool cycle(int node,unordered_map<int,bool>&visited,vector<int> adj[]){
        
        unordered_map<int,int> parent;
        parent[node]=-1;
        visited[node]=true;
        queue<int>q;
        q.push(node);
        
        while(!q.empty()){
            int front=q.front();
            q.pop();
            for(auto i:adj[front]){
                if(visited[i]==true && i!=parent[front]){
                    return true;
                }
                if(!visited[i]){
                    q.push(i);
                    visited[i]=true;
                    parent[i]=front;
                }
            }
        }
        return false;
        
    }
};
