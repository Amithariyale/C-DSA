//User function template for C++

class Solution
{
	public:
    //Function to return a list of lists of integers denoting the members 
    //of strongly connected components in the given graph.
    vector<vector<int>> tarjans(int V, vector<int> adj[])
    {
        //code here
       
        
        vector<int>vis(V,0);
        stack<int>s;
        
        //finding topological sort
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,adj,vis,s);
            }
        }
        
        //creating transpose graph
        unordered_map<int,list<int>>trans;
        for(int i=0;i<V;i++){
            vis[i]=0;
            for(auto it:adj[i]){
                trans[it].push_back(i);
            }
        }
        
        vector<vector<int>>ans;
        while(!s.empty()){
            int top=s.top();
            s.pop();
            
            if(!vis[top]){
                vector<int>temp;
                transDfs(top,vis,trans,temp);
                sort(temp.begin(),temp.end());
                ans.push_back(temp);
            }
            
            
            
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
    
    void dfs(int node, vector<int> adj[],vector<int>&vis,stack<int>&s){
        
        vis[node]=1;
        
        for(auto it:adj[node]){
            if(!vis[it]){
                dfs(it,adj,vis,s);
            }
        }
        
        s.push(node);
    }
    
    void transDfs(int node,vector<int>&vis,unordered_map<int,list<int>>&trans,vector<int>&temp){
        
        vis[node]=1;
        temp.push_back(node);
        
        for(auto it:trans[node]){
            if(!vis[it]){
                transDfs(it,vis,trans,temp);
            }
        }
    }
};







