/* A binary tree node has data, pointer to left child
   and a pointer to right child 
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */

// Should return  right view of tree
class Solution
{
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       // Your Code here
       vector<int>ans;
       map<int,int>node;
       queue<pair<Node*,int> >q;
       
       q.push(make_pair(root,0));
       
       while(!q.empty()){
           pair<Node*,int>temp=q.front();
           q.pop();
           
           Node* right=temp.first;
           int lvl=temp.second;
           
           if(node.find(lvl)==node.end()){
               node[lvl]=right->data;
           }
           if(right->right){
               q.push(make_pair(right->right,lvl+1));
           }
           if(right->left){
               q.push(make_pair(right->left,lvl+1));
           }
           
       }
       for(auto i:node){
           ans.push_back(i.second);
       }
       return ans;
    }
};

