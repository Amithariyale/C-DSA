class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();

        if(grid[0][0]==1 || grid[n-1][n-1]==1)return -1;

        //vector<vector<int>>vis(n,vector<int>(n,0));
        int dir[8][2]={{0,1},{1,0},{0,-1},{-1,0},{1,1},{-1,-1},{1,-1},{-1,1}};
        
        queue<pair<int,int>>q;
        q.push({0,0});
        int ans=1;
        grid[0][0]=1;

        while(!q.empty()){
            int m=q.size();

            for(int k=0;k<m;k++){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();

                for(auto it:dir){
                    int x=i+it[0];
                    int y=j+it[1];

                    if(x>=0 && x<n && y>=0 && y<n && grid[x][y]==0 ){
                        q.push({x,y});
                        grid[x][y]=1;
                    }
                    
                }
                if(i==n-1 && j==n-1)return ans;
            }
            
            ans++;
            
        }

        return -1;
    }
};
