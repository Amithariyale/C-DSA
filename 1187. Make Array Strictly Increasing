class Solution {
public:
    int solve(int prev,int i,vector<int>&arr1,vector<int>&arr2,map<pair<int,int>,int>&dp){
        if(i==arr1.size())return 0;
        if(dp.find({i,prev})!=dp.end())return dp[{i,prev}];

        int ans=INT_MAX/2;
        if(arr1[i]>prev)ans=min(ans,solve(arr1[i],i+1,arr1,arr2,dp));

        int nextIdx=upper_bound(arr2.begin(),arr2.end(),prev)-arr2.begin();
        if(nextIdx<arr2.size())ans=min(ans,solve(arr2[nextIdx],i+1,arr1,arr2,dp)+1);

        return dp[{i,prev}]=ans;
    }
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        
        map<pair<int,int>,int>dp;

        sort(arr2.begin(),arr2.end());

        int ans=solve(INT_MIN,0,arr1,arr2,dp);
        return ans>=INT_MAX/2?-1:ans;
    }
};
