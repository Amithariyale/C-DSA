// User function Template for C++
class Solution {
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<int>dis(N,INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
        vector<vector<pair<int,int>>>edj(N);
        for(auto t:edges){
            edj[t[0]].push_back({t[1],t[2]});
        }
        
        dis[0]=0;
        q.push({0,0});
        
        while(!q.empty()){
            
            int distance=q.top().first;
            int node=q.top().second;
            q.pop();
            
            for(auto j:edj[node]){
                
               
                    int v=j.first;
                    int w=j.second;
                
                    if(distance+w<dis[v]){
                        dis[v]=distance+w;
                        q.push({dis[v],v});
                    }
                
            }
        }
        
        for(int i=0;i<N;i++){
            if(dis[i]==INT_MAX){
                dis[i]=-1;
            }
        }
        return dis;
    }
};
