
class Node{
    public:
        int data;
        Node* left;
        Node* right;
        
        Node(int d){
            data=d;
            left=NULL;
            right=NULL;
        }
};

class cmp{
    public:
    bool operator()(Node* a,Node* b){
        return a->data > b->data;
    }
};
class Solution
{
	public:
	    void solve(Node* root,vector<string>&ans,string temp){
	        if(root->left==NULL && root->right==NULL){
	            ans.push_back(temp);
	            return;
	        }
	        
	        solve(root->left,ans,temp+'0');
	        solve(root->right,ans,temp+'1');
	    }
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // Code here
		    priority_queue<Node*,vector<Node*>,cmp>q;
		    
		    for(int i=0;i<N;i++){
		        Node* temp=new Node(f[i]);
		        q.push(temp);
		    }
		    
		    while(q.size()>1){
		        Node* temp1=q.top();
		        q.pop();
		        Node* temp2=q.top();
		        q.pop();
		        
		        int sum=temp1->data+temp2->data;
		        
		        Node* temp=new Node(sum);
		        
		        temp->left=temp1;
		        temp->right=temp2;
		        
		        q.push(temp);
		    }
		    
		    Node* root=q.top();
		    q.pop();
		    
		    vector<string>ans;
		    
		    string temp="";
		    
		    solve(root,ans,temp);
		    
		    return ans;
		}
};
