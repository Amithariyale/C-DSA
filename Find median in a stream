class Solution
{
    public:
    priority_queue<int>maxi;
    priority_queue<int,vector<int>,greater<int>>mini;
    
    int median=0;
    int signum(int a,int b){
        if(a==b)return 0;
        else if(a>b)return 1;
        else return -1;
    }
    //Function to insert heap.
    void insertHeap(int &x)
    {
        switch(signum(maxi.size(),mini.size())){
            
            case 0:
                if(x>median){
                    mini.push(x);
                    median=mini.top();
                }
                else{
                    maxi.push(x);
                    median=maxi.top();
                }
                break;
            case 1:
                if(x>median){
                    mini.push(x);
                    median=(maxi.top()+mini.top())/2;
                }
                else{
                    mini.push(maxi.top());
                    maxi.pop();
                    maxi.push(x);
                    median=(maxi.top()+mini.top())/2;
                }
                break;
            
            case -1:
                if(x>median){
                    maxi.push(mini.top());
                    mini.pop();
                    mini.push(x);
                    median=(maxi.top()+mini.top())/2;
                }
                else{
                    maxi.push(x);
                    median=(maxi.top()+mini.top())/2;
                }
                break;
        }
        
        
        
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
        
    }
    
    //Function to return Median.
    double getMedian()
    {
        if(median!=0){
            return median;
        }
    }
};
