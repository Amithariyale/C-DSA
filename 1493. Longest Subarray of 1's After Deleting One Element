class Solution {
public:
    // int solve(int i,vector<int>&nums){
    //     if(i==nums.size())return 0;
        
    //     int ans=0;
        
    //     int left=i-1;
    //     int right=i+1;
    //     while(left>=0 && nums[left]==1)left--;
    //     while(right<nums.size() && nums[right]==1)right++;

    //     ans=right-left-2;

    //     ans=max(ans,solve(i+1,nums));
    //     return ans;
    // }
    int longestSubarray(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1,0);
        bool one=false;
        bool zero=false;
        for(int i=0;i<n;i++){
            if(nums[i]==1)one=true;
            if(nums[i]==0)zero=true;
            if(one&zero)break;
        }

        if(!zero)return n-1;
        else if(!one)return 0;

        for(int i=n-1;i>=0;i--){
            int ans=0;
            if(nums[i]==0){
                int left=i-1;
                int right=i+1;

                while(left>=0 && nums[left]==1)left--;
                while(right<nums.size() && nums[right]==1)right++;

                ans=right-left-2;
            }
            dp[i]=max(ans,dp[i+1]);
        }

        return dp[0];
    }
};
