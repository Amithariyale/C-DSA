/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* &head){
        ListNode* curr=head;
        ListNode* next=NULL;
        ListNode* prev=NULL;

        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head=NULL;
        ListNode* temp1=l1;
        ListNode* temp2=l2;
        int rem=0;

        while(temp1!=NULL && temp2!=NULL){
            int sum=temp1->val+temp2->val+rem;
            int num=sum%10;
            rem=sum/10;

            ListNode* node=new ListNode(num);
            node->next=head;
            head=node;
            temp1=temp1->next;
            temp2=temp2->next;
        }

        while(temp1!=NULL){
            int sum=temp1->val+rem;
            int num=sum%10;
            rem=sum/10;

            ListNode* node=new ListNode(num);
            node->next=head;
            head=node;
            temp1=temp1->next;
        }
        while(temp2!=NULL){
            int sum=temp2->val+rem;
            int num=sum%10;
            rem=sum/10;

            ListNode* node=new ListNode(num);
            node->next=head;
            head=node;
            temp2=temp2->next;
        }

        while(rem){
            int num=rem%10;
            rem/=10;

            ListNode* node=new ListNode(num);
            node->next=head;
            head=node;
        }

        head=reverse(head);

        return head;
    }
};
