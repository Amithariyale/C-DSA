// User function Template for C++

class TrieNode{
    
      public:
      char data;
      TrieNode* children[26];
      bool isTerminal;
      
      TrieNode(char ch){
          data=ch;
          for(int i=0;i<26;i++){
              children[i]=NULL;
          }
          isTerminal=false;
      }
};
class Trie{
  
    public:
    TrieNode* root;
    
    Trie(){
        root=new TrieNode('\0');
    }
    
    void insert(TrieNode* root,string word){
        if(word.length()==0){
            root->isTerminal=true;
            return;
        }
        
        int index=word[0]-'a';
        TrieNode* child;
        
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new TrieNode(word[0]);
            root->children[index]=child;
        }
        
        insert(child,word.substr(1));
    }
    public:
    vector<vector<string>> get(string str){
        TrieNode* prev=root;
        vector<vector<string>>ans;
        string prefix="";
        
        int i=0;
        for(int i=0;i<str.length();i++){
            
            char last=str[i];
            
            prefix.push_back(last);
            
            TrieNode* curr=prev->children[last-'a'];
            
            if(curr==NULL){
                break;
            }
            vector<string>temp;
            printsugg(curr,temp,prefix);
            
            ans.push_back(temp);
            temp.clear();
            prev=curr;
        }
        
        if(i<str.size()){
            while(i<str.size()){
                ans.push_back({"0"});
                i++;
            }
        }
        return ans;
    }
    
    void printsugg(TrieNode* root,vector<string>&temp,string prefix){
        
        if(root->isTerminal){
            temp.push_back(prefix);
        }
        
        for(char ch='a';ch<='z';ch++){
            
            TrieNode* next=root->children[ch-'a'];
            
            if(next!=NULL){
                prefix.push_back(ch);
                printsugg(next,temp,prefix);
                prefix.pop_back();
            }
        }
    }
    
    void insertWord(string word){
        insert(root,word);
    }
};
class Solution{
public:
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
        // code here
        Trie* t=new Trie();
        
        for(int i=0;i<n;i++){
            string str=contact[i];
            t->insertWord(str);
        }
        
        return t->get(s);
    }
};
