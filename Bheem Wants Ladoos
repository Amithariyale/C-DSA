/*
// node structure:

struct Node
{
    int data;
    Node* left;
    Node* right;
};

*/



class Solution{

    public:
    Node* node=NULL;
    
    void findParent(Node* root,int home,unordered_map<Node*,Node*>&parent,Node* par){
        if(root==NULL){
            return ;
        }
        
        if(root->data==home){
            node=root;
        }
        
        parent[root]=par;
        
        findParent(root->left,home,parent,root);
        
        findParent(root->right,home,parent,root);
    }
    int ladoos(Node* root, int home, int k)
    {
        // Your code goes here
        unordered_map<Node*,Node*>parent;
        unordered_map<Node*,bool>vis;
        
        findParent(root,home,parent,root);
        
        queue<Node*>q;
        q.push(node);
        vis[node]=true;
        
        int ans=0;
        
        int cnt=0;
        
        while(cnt<=k){
            int n=q.size();
            
            for(int i=0;i<n;i++){
                Node* temp=q.front();
                q.pop();
                
                ans+=temp->data;
                
                if(temp->left && !vis[temp->left]){
                    q.push(temp->left);
                    vis[temp->left]=true;
                }
                
                if(temp->right && !vis[temp->right]){
                    q.push(temp->right);
                    vis[temp->right]=true;
                }
                
                if(!vis[parent[temp]]){
                    q.push(parent[temp]);
                    vis[parent[temp]]=true;
                }
                    
            }
            cnt++;
        }
        
        return ans;
    }


};
