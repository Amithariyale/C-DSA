

/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */


//Function to return a list containing the level order traversal in spiral form.
vector<int> findSpiral(Node *root)
{
    //Your code here
    vector<int>ans;
    if(root==NULL){
        return ans;
    }
    queue<Node*>q;
    q.push(root);
    
    bool spiral=true;
    while(!q.empty()){
        int n=q.size();
        vector<int>S(n);
        for(int i=0;i<n;i++){
            Node* temp=q.front();
            q.pop();
            
            int index=spiral? n-1-i:i;
            S[index]=temp->data;
            
            if(temp->left)
                q.push(temp->left);
                
            if(temp->right)
                q.push(temp->right);
        }
        spiral=!spiral;
        for(auto i:S){
            ans.push_back(i);
        }
        
    }
    return ans;
}
