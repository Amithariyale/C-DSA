/*You are required to complete this method*/

class Solution{
    private:
    
    vector<int> prevSmaller(int* M,int n){
        
        vector<int>ans(n);
        stack<int>s;
        s.push(-1);
        
        for(int i=0;i<n;i++){
            
            while(s.top()!=-1 && M[s.top()]>=M[i]){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }
    vector<int> nextSmaller(int* M,int n){
        
        vector<int> ans(n);
        stack<int>s;
        s.push(-1);
        
        for(int i=n-1;i>=0;i--){
            
            while(s.top()!=-1 && M[s.top()]>=M[i]){
                s.pop();
            }
            ans[i]=s.top();
            s.push(i);
        }
        return ans;
    }
    int max_area(int* M,int n){
        int area=INT_MIN;
        vector<int>next(n);
        next=nextSmaller(M,n);
        
        vector<int>prev(n);
        prev=prevSmaller(M,n);
        
        for(int i=0;i<n;i++){
            int a=M[i];
            
            if(next[i]==-1){
                next[i]=n;
            }
            int b=next[i]-prev[i]-1;
            int newArea=a*b;
            area=max(area,newArea);
        }
        return area;
    }
  public:
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        int area=max_area(M[0],m);
        
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(M[i][j]!=0){
                    M[i][j]=M[i][j]+M[i-1][j];
                }
                else{
                    M[i][j]=0;
                }
            }
            area=max(area,max_area(M[i],m));
        }
        return area;
    }
};
