
class Solution
{
    public:
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) 
    {
        //code here
        int n=grid.size();
        vector<vector<int>>vis(n,vector<int>(n,0));
        queue<pair<int,int>>q;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i,j}); 
                    break;
                    
                }
            }
        }
        int in[4][2]={{0,1},{1,0},{-1,0},{0,-1}};
        
        int ans=0;
        
        while(!q.empty()){
            
            int m=q.size();
            for(int i=0;i<m;i++){
                auto it=q.front();
                q.pop();
                
                for(int j=0;j<4;j++){
                    int x=it.first+in[j][0];
                    int y=it.second+in[j][1];
                    
                    if(valid(x,y,n,vis,grid)){
                        q.push({x,y});
                        vis[x][y]=1;
                    }
                }
                
                if(grid[it.first][it.second]==2){
                    return ans;
                }
                
                ans++;
                
            }
        }
        
        return 0;
    }
    
    bool valid(int x,int y,int n,vector<vector<int>>&vis,vector<vector<int>>& grid){
        
        if(x>=0 && x<n && y>=0 && y<n && !vis[x][y] && grid[x][y]!=0){
            return true;
        }
        return false;
    }
};
