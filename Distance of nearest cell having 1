class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    // Code here
	    int n=grid.size();
	    int m=grid[0].size();
	    
	    
	    
	    vector<vector<int>>ans(n,vector<int>(m,-1));
	    
	    queue<pair<int,int>>q;
	    
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            if(grid[i][j]==1){
	                q.push({i,j});
	                ans[i][j]=0;
	            }
	        }
	    }
	    
	    
	    
	    int dir[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
	    
	    while(!q.empty()){
	        int size=q.size();
	        
	        for(int i=0;i<size;i++){
	            auto it=q.front();
	            q.pop();
	            
	            for(auto d:dir){
	                int x=it.first+d[0];
	                int y=it.second+d[1];
	                
	                if(x>=0 && x<n && y>=0 && y<m && ans[x][y]==-1){
	                    q.push({x,y});
	                    ans[x][y]=ans[it.first][it.second]+1;
	                }
	                
	            }
	        }
	    }
	   
	    return ans;
	}
	

};







