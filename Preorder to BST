//User function template in C++

/*

typedef struct Node
{
    int data;
    struct Node *left, *right;
} Node;


// A utility function to create a new tree node
Node* newNode( int data )
{
    Node* temp = (Node *)malloc( sizeof( Node ) );
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

*/

class Solution{
private:
    Node* solve(int pre[],int &i,int n,int mini,int maxi){
        if(pre[i]>maxi || pre[i]<mini || i==n){
            return NULL;
        }
        
        Node* root = (Node *)malloc( sizeof( Node ) );
        
        root->data=pre[i];
        i++;
        root->left=solve(pre,i,n,mini,root->data);
        
        root->right=solve(pre,i,n,root->data,maxi);
        
        return root;
    }
public:
    //Function that constructs BST from its preorder traversal.
    Node* post_order(int pre[], int size)
    {
        //code here
        int i=0;
        return solve(pre,i,size,INT_MIN,INT_MAX);
    }
};
