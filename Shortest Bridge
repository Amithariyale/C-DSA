class Solution {
public:
    int dir[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
    
    void dfs(int row,int  col,vector<vector<int>>& grid,set<pair<int,int>>&st){
        st.insert({row,col});

        for(auto it:dir){
            int x=it[0]+row;
            int y=it[1]+col;

            if(st.find({x,y})==st.end() && x>=0 && y>=0 && x<grid.size() &&  y<grid.size() && grid[x][y]==1 ){
                dfs(x,y,grid,st);
            }
        }
    }
    int bfs(int row,int col,vector<vector<int>>&grid,vector<vector<int>>&vis,set<pair<int,int>>&st){

        queue<pair<int,pair<int,int>>>q;

        q.push({0,{row,col}});
        vis[row][col]=1;
        int ans=INT_MAX;
        
        while(!q.empty()){
            int level=q.front().first;
            int roww=q.front().second.first;
            int coll=q.front().second.second;

            
            q.pop();

            for(auto it:dir){
                int x=it[0]+roww;
                int y=it[1]+coll;

                if(x>=0 && y>=0 && x<grid.size() && y<grid.size() && st.find({x,y})==st.end() && !vis[x][y] &&grid[x][y]==0){
                    q.push({level+1,{x,y}});
                    vis[x][y]=1;
                    
                }
                else if(x>=0 && y>=0 && x<grid.size() && y<grid.size() &&grid[x][y]==1 && st.find({x,y})!=st.end() && !vis[x][y]){
                        return level;
                    }
                
            }

            
        }
        return ans;
    }
    int shortestBridge(vector<vector<int>>& grid) {
        int n=grid.size();
        set<pair<int,int>>st;
        int row=0;
        int col=0;
        bool flag=true;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    row=i;
                    col=j;
                    flag=false;
                    break;
                }
            }
            if(!flag)break;
        }

        dfs(row,col,grid,st);
        
        int ans=INT_MAX;
        vector<vector<int>>vis(n,vector<int>(n,0));
        vector<vector<int>>vis2(n,vector<int>(n,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && st.find({i,j})==st.end()){
                    ans=min(ans,bfs(i,j,grid,vis2,st));
                    vis2=vis;
                }

            }

        }

        return ans;
    }
};
