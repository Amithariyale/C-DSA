

class Solution
{
    public:
    //Function to return the minimum cost to react at bottom
	//right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        // Code here
        int n=grid.size();
        vector<vector<int>>vis(n,vector<int>(n,0));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>q;
        
        q.push({grid[0][0],{0,0}});
        
        vis[0][0]=1;
        
        int dir[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
        
        while(!q.empty()){
            
            int m=q.size();
            
            for(int i=0;i<m;i++){
                auto it=q.top();
                q.pop();
                
                for(int j=0;j<4;j++){
                    int x=it.second.first+dir[j][0];
                    int y=it.second.second+dir[j][1];
                    
                    if(valid(x,y,n,vis)){
                        int sum=it.first+grid[x][y];
                        q.push({sum,{x,y}});
                        vis[x][y]=1;
                    }
                }
                if(it.second.first==n-1 && it.second.second==n-1){
                    return it.first;
                }
            }
        }
    }
    
    bool valid(int x,int y,int n,vector<vector<int>>&vis){
        return (x>=0 && x<n && y>=0 && y<n && !vis[x][y]);
    }
};
