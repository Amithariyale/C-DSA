/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,long long>>q;
        q.push({root,1});
        long long mod=1e11+7;
        long long ans=0;
        while(!q.empty()){
            long long size=q.size();
            long long first=0;
            long long second=0;
            for(long long i=0;i<size;i++){
                TreeNode* cur=q.front().first;
                long long level=q.front().second;
                level%=mod;
                q.pop();
                if(cur->left){
                    if(first>0){
                        second=(level*2)-1;
                    }
                    else{
                        first=(level*2)-1;
                        second=(level*2)-1;
                    }
                    q.push({cur->left,(level*2)-1});
                }
                if(cur->right){
                    if(first>0){
                        second=(level*2);
                    }
                    else{
                        first=(level*2);
                        second=(level*2);
                    }
                    q.push({cur->right,(level*2)});
                }
            }
            ans=max(ans,(second-first)+1);
        }
        return ans;
    }
};
