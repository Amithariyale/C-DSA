class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        
        vector<vector<int>>adj(n);
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }

        vector<int>comp;
        vector<int>vis(n,0);

        for(int i=0;i<n;i++){

            if(!vis[i]){
                int cnt=0;
                dfs(i,vis,adj,cnt);
                comp.push_back(cnt);
            }
        }

        long long int ans=0;

        if(comp.size()>1){
            long long int sum=0;
            for(int i=0;i<comp.size();i++){
                sum+=comp[i];
            }

            for(int i=0;i<comp.size();i++){
                ans+=comp[i]*(sum-comp[i]);
                sum-=comp[i];
            }
        }
        
        return ans;
    }

    void dfs(int node,vector<int>&vis,vector<vector<int>>&adj,int &cnt){
        vis[node]=1;

        for(auto it:adj[node]){
            if(!vis[it]){
                dfs(it,vis,adj,cnt);
            }
        }

        cnt++;
    }
};










